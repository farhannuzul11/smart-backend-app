import re
from langchain.tools import tool # Learn about this library later

@tool
def calculator_tool(input: str) -> str:
    """Use Qwen2-5B-Instruct to answer questions that require deep language reasoning or mathematical problem solving.

    This tool sends the input question or task to the Qwen2-5B-Instruct model via OpenAI-compatible API and returns the structured result.

    Qwen2-5B-Instruct is a multilingual large language model capable of:
    - Answering factual questions
    - Performing logical reasoning
    - Solving mathematical expressions and word problems
    - Responding in various languages
    - Providing explanations and step-by-step answers

    Args:
        input (str): The question, prompt, or task to solve, written in natural language. This may include:
            - General knowledge questions (e.g., "What is the capital of Brazil?")
            - Math expressions (e.g., "What is the integral of x^2?")
            - Word problems (e.g., "If a car travels 60 km in 2 hours, what is the speed?")
            - Reasoning tasks (e.g., "If all bloops are razzies, and all razzies are lazzies...")

    Returns:
        str: The response generated by Qwen2-5B-Instruct. This will usually be a direct answer, a step-by-step explanation,
        or reasoning based on the prompt provided.

    Example:
        >>> qwen_tool("Solve: 2x + 3 = 9")
        'To solve 2x + 3 = 9, subtract 3 from both sides: 2x = 6. Then divide by 2: x = 3.'

    Notes:
        - The Qwen2-5B-Instruct model runs locally and does not require internet access once the model is loaded.
        - If mathematical accuracy is critical, cross-validate using a symbolic math engine if needed.
    """
    try:
        # Ekstrak ekspresi matematika dari input
        match = re.search(r'([\d\s\+\-\*/\(\)\.]+)', input)
        if not match:
            return "[calculator] Invalid math expression."

        expression = match.group(1)
        result = eval(expression)
        return f"[calculator] {result}"

    except Exception:
        return "[calculator] Invalid math expression."

# @tool
# def calculator_tool(input: str) -> str:
#     """Use Qwen2-5B-Instruct to answer questions that require deep language reasoning or mathematical problem solving.

#     This tool sends the input question or task to the Qwen2-5B-Instruct model via OpenAI-compatible API and returns the structured result.

#     Qwen2-5B-Instruct is a multilingual large language model capable of:
#     - Answering factual questions
#     - Performing logical reasoning
#     - Solving mathematical expressions and word problems
#     - Responding in various languages
#     - Providing explanations and step-by-step answers

#     Args:
#         input (str): The question, prompt, or task to solve, written in natural language. This may include:
#             - General knowledge questions (e.g., "What is the capital of Brazil?")
#             - Math expressions (e.g., "What is the integral of x^2?")
#             - Word problems (e.g., "If a car travels 60 km in 2 hours, what is the speed?")
#             - Reasoning tasks (e.g., "If all bloops are razzies, and all razzies are lazzies...")

#     Returns:
#         str: The response generated by Qwen2-5B-Instruct. This will usually be a direct answer, a step-by-step explanation,
#         or reasoning based on the prompt provided.

#     Example:
#         >>> qwen_tool("Solve: 2x + 3 = 9")
#         'To solve 2x + 3 = 9, subtract 3 from both sides: 2x = 6. Then divide by 2: x = 3.'

#     Notes:
#         - The Qwen2-5B-Instruct model runs locally and does not require internet access once the model is loaded.
#         - If mathematical accuracy is critical, cross-validate using a symbolic math engine if needed.
#     """
#     try:
#         result = eval(input)
#         return f"[calculator] {result}"

#     except Exception:
#         return "[calculator] Invalid math expression."
